# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type SimpleResponse {
  success: Boolean!
  messages: [String!]
}

type User {
  id: Int
  enabled: Boolean!
  email: String!
  verified: Boolean!
  firstName: String!
  lastName: String!
  title: String
  description: String
  role: String!
}

type TokenPayload {
  accessToken: String!
  refreshToken: String!
  expiresIn: Float!
}

type TokenResponse {
  data: TokenPayload
  success: Boolean!
  messages: [String!]
}

type CashRegisterEntry {
  id: Int
  enabled: Boolean!
  companyId: Float!
  date: DateTime!
  docNumber: String!
  annexNumber: String
  description: String!
  value: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CashRegisterEntryDetails {
  previousTotalValue: Float!
  previousEntriesCount: Float!
  entries: [CashRegisterEntry!]!
}

type Company {
  id: Int
  enabled: Boolean!
  name: String!
  slogan: String
  description: String
  email: String!
  registerNumber: String!
  phone: String!
  website: String
  initialCashValue: String
  initialCashIndex: Int
  users(request: PageListInput): PaginatedCompanyUserResponse
}

input PageListInput {
  page: Float = 0
  pageSize: Float = 10
}

type CompanyUser {
  id: Int
  enabled: Boolean!
  verified: Boolean!
  userId: Float!
  companyId: Float!
  roles: [String!]!
  user: User!
}

type CompanyResponse {
  data: Company
  success: Boolean!
  messages: [String!]
}

type PaginatedCompanyUserResponse {
  data: [CompanyUser!]
  total: Int!
}

type PaginatedCompanyResponse {
  data: [Company!]
  total: Int!
}

type UserResponse {
  data: User
  success: Boolean!
  messages: [String!]
}

type PaginatedUserResponse {
  data: [User!]
  total: Int!
}

type CashAction implements BaseAction {
  view: Boolean!
  create: Boolean!
  update: Boolean!
  delete: Boolean!
}

interface BaseAction {
  view: Boolean!
  create: Boolean!
  update: Boolean!
  delete: Boolean!
}

type CompanyAction implements BaseAction {
  view: Boolean!
  create: Boolean!
  update: Boolean!
  delete: Boolean!
  inviteUser: Boolean!
  excludeUser: Boolean!
}

type InventoryAction implements BaseAction {
  view: Boolean!
  create: Boolean!
  update: Boolean!
  delete: Boolean!
}

type UserAction implements BaseAction {
  view: Boolean!
  create: Boolean!
  update: Boolean!
  delete: Boolean!
}

type Permission {
  user: UserAction!
  company: CompanyAction!
  cash: CashAction!
  inventory: InventoryAction!
}

type Viewer {
  permissions: Permission!
}

type Query {
  viewer: Viewer!
  users(request: PageListInput): PaginatedUserResponse!
  user: User
  companyUser(id: Float!): CompanyUser
  companies(request: PageListInput): PaginatedCompanyResponse!
  company: Company
  cashRegisters: [String!]!
  cashRegisterEntries(date: DateTime!): CashRegisterEntryDetails!
  lastEntryDate: DateTime
}

type Mutation {
  login(username: String!, password: String!): TokenResponse!
  logout(refreshToken: String!): SimpleResponse!
  refresh(refreshToken: String!, accessToken: String!): TokenResponse!
  sendResetPasswordEmail(email: String!): SimpleResponse!
  checkResetPasswordToken(token: String!): SimpleResponse!
  resetPassword(token: String!, newPassword: String!): SimpleResponse!
  updateUser(model: UserInput!): UserResponse!
  deleteUser(id: Float): UserResponse!
  changePassword(model: ChangePasswordInput!): SimpleResponse!
  inviteUser(model: InviteUserInput!): SimpleResponse!
  excludeUser(userId: Float!): SimpleResponse!
  createCompany(model: CompanyInput!): CompanyResponse!
  updateCompany(model: CompanyInput!): CompanyResponse!
  deleteCompany(id: Float!): CompanyResponse!
  updateCompanyCashDetails(model: CompanyCashDetailsInput!): SimpleResponse!
  saveCashRegister(entities: [CashRegisterEntryInput!]!): SimpleResponse!
  deleteCashRegister(date: DateTime!): SimpleResponse!
  deleteCashRegisterEntries(ids: [Int!]!): SimpleResponse!
}

input UserInput {
  id: Int
  firstName: String!
  lastName: String!
  title: String
  description: String
}

input ChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input InviteUserInput {
  email: String!
  firstName: String!
  lastName: String!
}

input CompanyInput {
  id: Int
  name: String!
  slogan: String
  description: String
  email: String!
  registerNumber: String!
  phone: String!
  website: String
}

input CompanyCashDetailsInput {
  initialCashIndex: Int
  initialCashValue: Float
}

input CashRegisterEntryInput {
  id: Int
  date: DateTime!
  docNumber: String!
  annexNumber: String
  description: String!
  value: Float!
}