# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type SimpleResponse {
  success: Boolean!
  messages: [String!]
}

type User {
  id: Int
  enabled: Boolean!
  email: String!
  firstName: String!
  lastName: String!
  role: String!
}

type UserResponse {
  data: User
  success: Boolean!
  messages: [String!]
}

type PaginatedUserResponse {
  data: [User!]
  total: Int!
}

type TokenPayload {
  accessToken: String!
  refreshToken: String!
  expiresIn: Float!
}

type TokenResponse {
  data: TokenPayload
  success: Boolean!
  messages: [String!]
}

type Company {
  id: Int
  enabled: Boolean!
  name: String!
  email: String!
  registerNumber: String!
  phone: String!
  users: [CompanyUser!]
}

type CompanyUser {
  id: Int
  enabled: Boolean!
  userId: Float!
  user: User!
  companyId: Float!
  roles: [String!]!
}

type CompanyResponse {
  data: Company
  success: Boolean!
  messages: [String!]
}

type PaginatedCompanyResponse {
  data: [Company!]
  total: Int!
}

type CompanyAction implements BaseAction {
  view: Boolean!
  create: Boolean!
  update: Boolean!
  delete: Boolean!
  inviteUser: Boolean!
  excludeUser: Boolean!
}

interface BaseAction {
  view: Boolean!
  create: Boolean!
  update: Boolean!
  delete: Boolean!
}

type UserAction implements BaseAction {
  view: Boolean!
  create: Boolean!
  update: Boolean!
  delete: Boolean!
}

type Permission {
  user: UserAction!
  company: CompanyAction!
}

type Viewer {
  permissions: Permission!
}

type Query {
  users(request: PageListInput): PaginatedUserResponse!
  user(id: Float!): User
  viewer: Viewer!
  companies(request: PageListInput): PaginatedCompanyResponse!
  company(id: Float!): Company
}

input PageListInput {
  page: Float = 1
  pageSize: Float = 10
}

type Mutation {
  login(password: String!, username: String!): TokenResponse!
  logout(refreshToken: String!): SimpleResponse!
  refresh(accessToken: String!, refreshToken: String!): TokenResponse!
  updateUser(model: UserInput!): UserResponse!
  deleteUser(id: Float): UserResponse!
  createCompany(model: CompanyInput!): CompanyResponse!
  updateCompany(model: CompanyInput!): CompanyResponse!
  deleteCompany(id: Float!): CompanyResponse!
}

input UserInput {
  id: Int
  enabled: Boolean!
  email: String!
  firstName: String!
  lastName: String!
}

input CompanyInput {
  id: Int
  enabled: Boolean!
  name: String!
  email: String!
  registerNumber: String!
  phone: String!
  users: [CompanyUserInput!]
}

input CompanyUserInput {
  id: Int
  enabled: Boolean!
  userId: Float!
  companyId: Float!
  roles: [String!]!
}
